<!doctype html>
<head>
    <meta charset="utf-8">

    <title>{{ title }}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="stylesheet" href="http://code.jquery.com/mobile/1.0rc2/jquery.mobile-1.0rc2.min.css" />
    <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
    <script src="http://code.jquery.com/mobile/1.0rc2/jquery.mobile-1.0rc2.min.js"></script>

    <script src="/socket.io/socket.io.js"></script>

    <style>
        #message {
            height:200px;
            width:200px;
            background-color:#000;
        }
    </style>

    <script>
    
        $(document).ready(function() {
            var clientId = parseInt(Math.random()*1000);
            var isConnected = false;
            var timeOffset = 0;
            var hasLocalStorage = ('localStorage' in window && window['localStorage'] !== null) ? true : false;
            
            // Create player
            var player = $('#message audio')[0]; 
            
            // Create button
            $('#message').bind("click", function(e) {
                player.play();
            });
            
            // Create socket
            var socket = io.connect(document.domain, {
                'reconnect': true,
                'reconnection delay': 500,
                'max reconnection attempts': 5
            });
            
            // Connect client
            socket.on('connect', function () {
                console.log('connected');
                isConnected = true;
                
                $('#log').text('Connected');
                
                // Emit clientId
                socket.emit('setClientId', clientId);
                
                $(player).attr('data-isloaded', false);
                $(player).bind('canplaythrough', function(e){
                    $("#log").html("loaded");
                    $("#src").append("<p>src " + $(player).attr("src") + "</p>");
                    $(player).attr('data-isloaded', true);
                    socket.emit('messageLoaded', clientId);
                });
                
                socket.on("networkTime", function(time) {
                    timeOffset = getClientTime(time);
                    //console.log("ti", timeOffset, time);
                });
                
                // Message change event handler.
                socket.on("messageChange", function onMessageChange(json) {
                    console.log('message changed');
                    $("#log").html("changed message start");
                    var params = $.parseJSON(json);
                    var id = params.id,
                        timestamp = params.ts,
                        src = '/play/' + id,
                        cache;

                    timeOffset = getClientTime(timestamp); 
                    
                    // Reset isLoaded
                    $(player).attr("data-isloaded", false);
                    
                    // TODO: Check if message is in localStorage
                    /*if (hasLocalStorage){
                        cache = localStorage.getItem(id);
                    }
                    if (cache) src = cache;*/
                    
                    // Load new audio file
                    $(player).attr("src", src);
                    player.load();
                    
                    $("#log").html("changed message finished");
                });
                
                // Message play handler
                socket.on("messagePlay", function onMessagePlay(json) {
                    $("#log").html("play message");
                    var params = $.parseJSON(json);
                    var id = params.id,
                        timestamp = params.ts;
                    
                    timeOffset = getClientTime(timestamp);
                    
                    var playAt = (params.tsAt - timeOffset);
                    var timeOut = playAt - new Date().getTime();
					$('#playAt').html('Play At: ' + playAt);
					$('#time').html('Timeout: ' + timeOut);
					
                    if (timeOut < 0) {
                       //dont play, too far behind.
                    } else {
                       window.setTimeout(function() {
                           $("#log").html("play message timeout");
                           if (player && $(player).attr('data-isloaded')) {
                               $("#log").html("play message complete");
                               console.log("player", player);
                               player.play();
                           }
                       }, timeOut);
                    }                    
                });                
            });
        });
        
        
        var offsetTimes = new Array();
		var precision = 8;
        
        function getClientTime(time) {
            var t = time - new Date().getTime() + globalDiff;
            $('#offset').html(new Date().getTime());
            $('#offset').html(t);
            if (offsetTimes.length > 60) {
            	offsetTimes = offsetTimes.splice(0, 25);
            }
            offsetTimes.push(t);
			//return t;
            return getStandardDeviation(offsetTimes, precision);
        }
        
        
        
        
		// Programmer: Larry Battle 
		// Date: Mar 06, 2011
		// Purpose: Calculate standard deviation, variance, and average among an array of numbers.
		var isArray = function (obj) {
			return Object.prototype.toString.call(obj) === "[object Array]";
		},
		getNumWithSetDec = function( num, numOfDec ){
			var pow10s = Math.pow( 10, numOfDec || 0 );
			return ( numOfDec ) ? Math.round( pow10s * num ) / pow10s : num;
		},
		getAverageFromNumArr = function( numArr, numOfDec ){
			if( !isArray( numArr ) ){ return false;	}
			var i = numArr.length, 
				sum = 0;
			while( i-- ){
				sum += numArr[ i ];
			}
			return getNumWithSetDec( (sum / numArr.length ), numOfDec );
		},
		getVariance = function( numArr, numOfDec ){
			if( !isArray(numArr) ){ return false; }
			var avg = getAverageFromNumArr( numArr, numOfDec ), 
				i = numArr.length,
				v = 0;
		 
			while( i-- ){
				v += Math.pow( (numArr[ i ] - avg), 2 );
			}
			v /= numArr.length;
			return getNumWithSetDec( v, numOfDec );
		},
		getStandardDeviation = function( numArr, numOfDec ){
			if( !isArray(numArr) ){ return false; }
			var stdDev = Math.sqrt( getVariance( numArr, numOfDec ) );
			return getNumWithSetDec( stdDev, numOfDec );
		};
        
        

    </script>
</head>

<body>
    <div data-role="page" class="type-index">
        <div data-role="content">
            <div id="message">
                <audio src="/audio/nu_click.mp3"></audio>
            </div>
            <div id="log"></div>
            <div id="src"></div>
            <div id="offset"></div>
            <div id="time"></div>
            <div id="playAt"></div>
        </div>
    </div>
</body>
</html>

