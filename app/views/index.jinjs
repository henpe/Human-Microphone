<!doctype html>
<head>
    <meta charset="utf-8">

    <title>{{ title }}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
    <!-- script src="http://code.jquery.com/mobile/1.0rc2/jquery.mobile-1.0rc2.min.js"></script -->

    <script src="/socket.io/socket.io.js"></script>

    <link rel="stylesheet" href="/css/styles.css">

    <script>
	    window.log=function(){log.history=log.history||[];log.history.push(arguments);if(this.console){arguments.callee=arguments.callee.caller;var a=[].slice.call(arguments);(typeof console.log==="object"?log.apply.call(console.log,console,a):console.log.apply(console,a))}};
	    (function(b){function c(){}for(var d="assert,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,timeStamp,profile,profileEnd,time,timeEnd,trace,warn".split(","),a;a=d.pop();){b[a]=b[a]||c}})((function(){try
	    {console.log();return window.console;}catch(err){return window.console={};}})());
    
        $(document).ready(function() {
            var clientId = parseInt(Math.random()*1000);
            var isConnected = false;
            var timeOffset = 0;
            var hasJoined = false;
            var hasLocalStorage = ('localStorage' in window && window['localStorage'] !== null) ? true : false;
            
            // Create player
            var player = $('#message audio')[0]; 
            
            // Create button
            $('#join span').bind("click", function(e) {
                hasJoined = true;
                $('#join').fadeOut("slow");
                player.play();
            });

            // Create socket
            var socket = io.connect(document.domain, {
                'reconnect': true,
                'reconnection delay': 500,
                'max reconnection attempts': 5
            });

            // Handshake 
            var initialTime = new Date().getTime();
            $.get('/time', function(data, textStatus, jqXHR) {
                var requestDelay = new Date().getTime() - initialTime;
                timeOffset = getClientOffset(data, requestDelay);
                $('#offset').html(timeOffset);
            }, 'text');

            // Connect client
            //if (hasJoined === true) {
                socket.on('connect', function () {
                    console.log('connected');
                    isConnected = true;
                    
                    $('#log').text('Connected');
                    
                    // Emit clientId
                    socket.emit('setClientId', clientId);
                    
                    $(player).attr('data-isloaded', false);
                    $(player).bind('canplaythrough', function(e){
                        $("#log").html("loaded");
                        $("#src").append("<p>src " + $(player).attr("src") + "</p>");
                        $(player).attr('data-isloaded', true);
                        socket.emit('messageLoaded', clientId);
                    });
                    
                    $(player).bind('ended', function(e){
                        $("#log").html("play message ended");
                        $('#page').removeClass("talking listening");
                    });
                    
                    $(player).bind('timeupdate', function(e){
                        console.log("x", e.target.ended);
                        if (e.target.ended) {
                            $("#log").html("play message ended");
                            $('#page').removeClass("talking listening");
                        }
                    });
                    
                    $(player).bind('error', function(e){
                        $("#log").html("play message error");
                        $('#page').removeClass("talking listening");
                    });
                    
                    /*socket.on("networkTime", function(time) {
                        timeOffset = getClientTime(time);
                    });*/
                    
                    // Message change event handler.
                    socket.on("messageChange", function onMessageChange(json) {
                        console.log('message changed');
                        $('#page').addClass("listening");
                        $("#log").html("changed message start");
                        var params = $.parseJSON(json);
                        var id = params.id,
                            timestamp = params.ts,
                            src = '/play/' + id,
                            cache;

                        //timeOffset = getClientTime(timestamp); 
                        
                        // Reset isLoaded
                        $(player).attr("data-isloaded", false);
                        
                        // TODO: Check if message is in localStorage
                        /*if (hasLocalStorage){
                            cache = localStorage.getItem(id);
                        }
                        if (cache) src = cache;*/
                        
                        // Load new audio file
                        console.log(src, id);
                        $(player).attr("src", src);
                        player.load();
                        
                        $("#log").html("changed message finished");
                    });
                    
                    // Message play handler
                    socket.on("messagePlay", function onMessagePlay(json) {
                        $("#log").html("play message");
                        var params = $.parseJSON(json);
                        var id = params.id,
                            timestamp = params.ts;
                        
                        //timeOffset = getClientTime(timestamp);
                        
                        var d = new Date().getTime();
                        var playAt = (params.tsAt - timeOffset);
                        
                        var timeOut = playAt - d;
                        
                        $('#playAt').html('Play At: ' + playAt);
                        $('#playAtServer').html('Play At Servertime: ' + params.tsAt + '+' + timeOffset);
                        $('#time').html('Timeout: ' + timeOut + ' - Offset: ' + timeOffset + ' - date: ' + d);
                        
                        if (timeOut < 0) {
                           //dont play, too far behind.
                        } else {
                           window.setTimeout(function() {
                               $("#log").html("play message timeout");
                               if (player && $(player).attr('data-isloaded')) {
                                   var currentTime = new Date().getTime();
                                   if (currentTime < playAt + 50 && currentTime > playAt - 50) {
                                       player.play();
                                       $('#page').removeClass("listening").addClass("talking");
                                   } else {
                                       $('#page').removeClass("listening talking");
                                   }
                               }
                           }, timeOut);
                        }                    
                    });                
                });                
            //}
        });

        function getClientOffset(serverTime, delay) {
            var offset = serverTime - (new Date().getTime() - delay);
            $('#offset').html(offset);

            return offset;
        }
        
		// Programmer: Larry Battle 
		// Date: Mar 06, 2011
		// Purpose: Calculate standard deviation, variance, and average among an array of numbers.
		var isArray = function (obj) {
			return Object.prototype.toString.call(obj) === "[object Array]";
		},
		getNumWithSetDec = function( num, numOfDec ){
			var pow10s = Math.pow( 10, numOfDec || 0 );
			return ( numOfDec ) ? Math.round( pow10s * num ) / pow10s : num;
		},
		getAverageFromNumArr = function( numArr, numOfDec ){
			if( !isArray( numArr ) ){ return false;	}
			var i = numArr.length, 
				sum = 0;
			while( i-- ){
				sum += numArr[ i ];
			}
			return getNumWithSetDec( (sum / numArr.length ), numOfDec );
		},
		getVariance = function( numArr, numOfDec ){
			if( !isArray(numArr) ){ return false; }
			var avg = getAverageFromNumArr( numArr, numOfDec ), 
				i = numArr.length,
				v = 0;
		 
			while( i-- ){
				v += Math.pow( (numArr[ i ] - avg), 2 );
			}
			v /= numArr.length;
			return getNumWithSetDec( v, numOfDec );
		},
		getStandardDeviation = function( numArr, numOfDec ){
			if( !isArray(numArr) ){ return false; }
			var stdDev = Math.sqrt( getVariance( numArr, numOfDec ) );
			return getNumWithSetDec( stdDev, numOfDec );
		};
        
        

    </script>
</head>

<body>
    <div id="page" data-role="page" class="type-index">
        <div data-role="content">
            <div id="message">
                <audio src="/audio/nu_click.mp3"></audio>
                <div id="join"><span>Join!</span></div>
            </div>
            <div id="status">
                <p class="default">This is The Inhuman Microphone</p>
	            <p class="listening">Incoming message!</p>
	            <p class="talking">Broadcasting message!</p>
            </div>
            <div id="description">
                <p>
                Inspired by Occupy Wall Street's <a href="http://www.thenation.com/blog/163767/we-are-all-human-microphones-now">Human Microphone</a>
                </p>
                
                <p>Made by <a href="http://www.twitter.com/indeox">@indeox</a> <a href="http://www.twitter.com/hpettersson">@hpettersson</a> <a href="http://www.twitter.com/shoez">@shoez</a> <a href="http://www.twitter.com/tomhannen">@tomhannen</a></p>
            </div>
            <div id="error">
	            <div id="log"></div>
	            <div id="src"></div>
	            <div id="offset"></div>
	            <div id="time"></div>
	            <div id="playAt"></div>
	            <div id="playAtServer"></div>
            </div>
        </div>
    </div>
</body>
</html>

